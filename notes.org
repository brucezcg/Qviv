#+STARTUP: hidestars showall
* <2011-05-10 Tue>
** Scaling and zooming
file:scale-and-offset.svg

  - Since QImage does not support scaling and cropping in one atomic command this must be done in the following two commands:
    - scale the s_copy_w area by the scale factor
    - copy and crop while ignoring the red areas.
* <2011-05-16 Mon>
** Done
   - Fixed repaint bug that stopped scrolling from working.
   - Added mouse scroll event and keyboards event.
   - Added several more zoom functions from gtkimageviewer.
** Bugs
   - [ ] There is an offset bug visible at high zoom ratios. Probably due to an error in the calculation of offsets in paintEvent.
** Todo
   - [X] Figure out how to support scroll bars.
   - [ ] Check if empty canvas without underlying image works.
   - [ ] Start working on overlay.

* <2011-05-20 Fri>
** Scrolling
   - Checkout out the qt sources and investigated how ~QTextEdit~ does it. What I found is that ~QTextEdit~ inherits from ~QAbstractScrollArea~ and it is responsible on its own for showing the scrollbars. This actually makes the interaction with the scrollbars much easier than through the gtk abstraction.
* <2011-05-22 Sun>
  * Todo
    - [X] Changed the parent of ~QvivImageViewer~ from ~Qwidget~ to ~QAbstractScrollArea~.
    - [X] Connect view changed to scrollbar changes.
    - [X] Connect scrollbar changes to view changes.
    - [ ] Support vertical flip.
    - [ ] Support horizontal flip.
* <2011-05-23 Mon>
** Todo
   - [X] Created example in QvivImage of how to draw in the imageAnnotate event.
* <2011-05-31 Tue>
** Signal woes 
   - [X] Why can't ~test-qviv-image-viewer.cc~ connect to the signal ~mouseMoveEvent(QMouseEvent*)~. Worked around it by introducing a signal of my own ~qvivMouseMoveEvent()~ that just relays this signal. *Answer*: There is a difference between events that may be overloaded and signals that may be received. The ~mouseMoveEvent()~ is an event, but since my test program is not inheriting from it, it can not catch the signal. The solution is to create a signal in my widget and translate the event into a signal.
   - Mouse motion event with relay works.
   - [X] Create a tooltip.
   - [X] Make tooltip change position with mouse motion.
   - [X] Change tooltip contents with mouse motion.
   - [X] How to make the size of the tooltip window fit the text? How do you get the natural size of a text label. Test adjustSize() that I found on the net
   - [X] Change the label background to Yellow. 
   - [X] Make label popdown on widget focus leave and show in motion handle.
   - [X] Implement ~CanvasToImg()~ and ~ImgToCanvas()~
   - [X] Data structure for giv data.
   - [X] Start implemenatino of =QvivWidget= based on the reference implementation in ~test-qviv-image-viewer~. 
* <2011-06-06 Mon>
** Notes
   - [X] Something is wrong with the position as seen by an example program drawing a circle at (0,0). Make sure it is always drawn correctly! What is the difference between Qviv and Giv?
   - [X] Start of QvivWidget.
     - [X] Override signals.
     - [X] Balloon support.
   - [X] Implement ~CanvasToImg()~ and ~ImgToCanvas()~
   - [X] Changed drawing of circles to use (x0,y0,size_x,size_y) coordinates.
** Drawing sub-pixel position
   - Annotation and motion are ok.
   - [X] Pixmap drawing is not accurate.
   - [X] Spurious annotations drawn. Why?
   - [X] Investigated image and calculations for sub pixel copying. Looks ok. So what is wrong?
   - [X] If widget is constraint to two powers, it works.
   - [X] Check arithmetics rounding errors.
* <2011-06-10 Fri>
** Pixel scaling problem
   - It turns out that scaling is not accurate for large scales when using ~Qt::FastTransformation~ for 0th order interpolation. The resulting image has the correct size, but the pixel boundaries appear to be powers of 2. There does not seem to be any way to work around this problem except for rewriting the scaling function myself for large scaling factors!
   - [X] Dragging doesn't work in ~test-qviv-image-viewer~.
   - [X] Wrote replacement for QImage::scaled().
* <2011-06-12 Sun>
** Data set
   - [X] Started implementing a data set structure.
   - [X] Changed test program to use this new structure.
** Balloon
   - [X] Got problem with motion of balloon under X11. Solved by using ~X11BypassWindowManagerHint~ flag.
   - [X] Test balloon under Windows.
** Windows 
   - [X] Compilation and running works!
   - [X] Fixed include errors on windows.
   - [X] Balloon steals focus. How can I can I make it not do that?
   - [X] Clicking in window puts main window in front. Need to raise balloon window.
** Regarding Qt painter vs Agg:
   - http://qtnode.net/wiki/Agg_painting
   - [[http://swik.net/Trolltech/Trolltech+Labs+Blogs/Qt+Graphics+and+Performance+-+The+Raster+Engine/dfwcx][Blog post about the birth of the Qt painting engine and how it was inspired by agg]].
** Done/Todo  
   - [ ] Drawing label image for balloons.
   - [ ] Renderer class so support both normal rendering and balloon rendering like in Giv.
   - [ ] Support line drawing and more types, etc.
   - [X] Make it work without an image.
     - [X] Bug in use of scrollbars when scroll_min_* != 0
     - [X] Scrolling creates black lines.
     - [X] With image, scroll region should be ignored. It is not!
     - [X] Moving the balloon popup causes complete repaint of background. This is too slow! Need to use backingstore. Ok. Erased calls to ~setUpdatesEnabled(true)~;
   - [X] Don't redraw on middle mouse grab and panning.
* <2011-06-15 Wed>
** Done/Todo
   - [X] Copied and merged the renderer and painter concepts from giv.
   - [X] Changed drawing to use the ~QvivPainterAgg~ class.
   - [X] Add painting of label image.
     - [X] Rewrite to support to handle balloon per point.
   - [X] Change balloon to use label image.
   - [ ] Support balloon per dataset? Do I need that?
   - [ ] Test polygons and lines.
* <2011-06-17 Fri>
** Done/Todo
   - [X] Fixed bug in balloon geometry.
   - [ ] Zoom on widget resize. Started not finished.
* <2011-06-18 Sat>
  - [X] Fixed widget resize on scaling.
  - [ ] Fix fill of image. See ~#ifdef 0~
  - [X] Figure out why zooming is slow by scroll wheel compared to giv.
  - [X] Made "m" toggle marks in ~QvivWidget~.
* <2012-01-07 Sat>
** Giv parser
The parser in giv is tighly integrated with the giv datastructures. A cleaner implementation would be to separate the parser from the datastructures and tie them together via a callback method, similar to the callbacks that exist in e.g. [[http://lloyd.github.com/yajl/][yajl]]. 
  - There is a qt json parser at: http://qjson.sourceforge.net/ which imports to qvariant.
  - Going via qjson will be slower than native structures, but faster to implement. 
  - License of qjson is LGPL which is fine.
  - Strategy:
    - [ ] qjson integration.
    - [ ] qvariant import and export of the QvivData structure.
    - [ ] integration of qjson and QvivData import.
    - [ ] Native json import via yajl.
  - About pro files, see: http://stackoverflow.com/questions/1417776/how-to-use-qmakes-subdirs-template
  - [X] Note that the building process is currently broken! *Fixed*.
* <2012-02-07 Tue>
** Text support
To support text I reused the balloon text database and used the balloon string as a text string instead. This means that you cannot have balloons on strings, but that is ok. But it means that the balloon class should be renamed string db as it is no longer exclusively for balloons.
  - [ ] Rename balloon references to reflect that they may also be text references.

A difference between fonts in gtk and in Qt is that in gtk the name is always a string that contain all information about the font, e.g. "Sans Bold 14". But it seems that in qt you can't embed the fontsize in the fontname but have to specify it separately. This may be solved by abstracting the font and add a parser. But in the first step we will keep the size separately.
  - [X] Add pointSize to QvivData class. Already there as ~text_size~.
  - [X] Connect ~text_size~ to painting.
  - [X] Support for font scaling. Currently only support fixed fonts. (This may involve getting the font outline instead of using QPainter as now).

Text alignment is easily done through QPainter.
  - [X] Text alignment with the sum of the following values.
    - Horizontal: 0=left, 1=hcenter, 2=right
    - Vertical: 0=top, 1=vcenter,2=bottom
* <2012-06-11 Mon>
** Rubber banding for measurements
Today I implemented rubber banding for measurements. The way I did it was by creating a secondary QvivDataSet in the QvivWidget that contains the drawing commands for the rubber band. In the mouseMoveEvent callback, this data set is updated with the drawing commands of the rubber band. Currently the drawing command is a fixed line, but it is easy to add a function for doing delegatino of the preparation of the drawing dataset. Once the new dataset has been prepared a redraw() command takes care of refreshing the entire widget.

Currently this method always redraws the entire widget for every motion event. This is in contrast to my gtk lasso that only exposes a set of small rectangles covering the old and the new positions of the rubber band. But the gtk data set can be extended to calculate such rectangles.

Another possible optimization is to creating a backing store image when entering the rubber band and use that backing store when painting the image contents.

I also tried using QRubberBand, which I just discovered exists. I thought that perhaps it was smarter, but it turns out juts as bad. Here is a link to an email discussing a similar efficiency problem with the rubberband:

* http://lists.qt.nokia.com/pipermail/qt-interest/2010-March/020971.html

Another interesting question that I have no good answer of yet is what is the difference http://qt-project.org/doc/qt-4.8/qgraphicsview.html#details and Qviv. Should make a list.

